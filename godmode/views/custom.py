from datetime import datetime, timedelta

from django.conf import settings
from django.http import Http404
from django.shortcuts import redirect, render
from django_q.tasks import async_task

from authn.decorators.auth import require_auth
from club.exceptions import AccessDenied
from common.dates import random_date_in_range
from godmode.config import ADMIN
from godmode.forms import GodmodeDigestEditForm, GodmodeInviteForm, GodmodeMassEmailForm, GodmodeMassAchievementForm
from godmode.models import ClubSettings
from invites.models import Invite
from notifications.email.custom import send_custom_mass_email
from notifications.email.invites import send_invited_email, send_account_renewed_email
from notifications.signals.achievements import async_create_or_update_achievement
from notifications.telegram.common import send_telegram_message, ADMIN_CHAT
from payments.models import Payment
from payments.products import PRODUCTS
from posts.models.post import Post
from users.models.achievements import UserAchievement
from users.models.user import User
from utils.strings import random_string


@require_auth
def godmode_digest_settings(request):
    if not request.me.is_god:
        return render(request, "godmode/message.html", {
            "admin": ADMIN,
            "title": "ü•≤ –í–∞–º —Å—é–¥–∞ –Ω–µ–ª—å–∑—è",
            "message": f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å—ã–ª–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç—ã, —ç—Ç–æ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã —Å —Ä–æ–ª—å—é god.",
        })

    god_settings = ClubSettings.objects.first()

    if request.method == "POST":
        form = GodmodeDigestEditForm(request.POST, request.FILES, instance=god_settings)
        if form.is_valid():
            form.save()
            return redirect("godmode_settings")
    else:
        form = GodmodeDigestEditForm(instance=god_settings)

    return render(request, "godmode/simple_form.html", {
        "admin": ADMIN,
        "title": "üíå –î–∞–π–¥–∂–µ—Å—Ç",
        "form": form
    })


@require_auth
def godmode_invite(request):
    if not request.me.is_god:
        return render(request, "godmode/message.html", {
            "admin": ADMIN,
            "title": "ü•≤ –í–∞–º —Å—é–¥–∞ –Ω–µ–ª—å–∑—è",
            "message": f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –ª—é–¥–µ–π –≤ –ö–ª—É–±, —ç—Ç–æ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã —Å —Ä–æ–ª—å—é god.",
        })

    if request.method == "POST":
        form = GodmodeInviteForm(request.POST, request.FILES)
        if form.is_valid():
            email = form.cleaned_data["email"].lower().strip()
            days = form.cleaned_data["days"]
            now = datetime.utcnow()

            user = User.objects.filter(email=email).first()
            if user:
                # add days to existing user instead of overwriting
                user.membership_expires_at = max(
                    now + timedelta(days=days),
                    user.membership_expires_at + timedelta(days=days)
                )
                user.membership_platform_type = User.MEMBERSHIP_PLATFORM_DIRECT
                user.updated_at = now
                user.save()
            else:
                # create new user with that email
                user, is_created = User.objects.get_or_create(
                    email=email,
                    defaults=dict(
                        membership_platform_type=User.MEMBERSHIP_PLATFORM_DIRECT,
                        full_name=email[:email.find("@")],
                        membership_started_at=now,
                        membership_expires_at=now + timedelta(days=days),
                        created_at=now,
                        updated_at=now,
                        moderation_status=User.MODERATION_STATUS_INTRO,
                    ),
                )

            if user.moderation_status == User.MODERATION_STATUS_INTRO:
                send_invited_email(request.me, user)
                send_telegram_message(
                    chat=ADMIN_CHAT,
                    text=f"üéÅ <b>–Æ–∑–µ—Ä–∞ '{email}' –∑–∞–∏–Ω–≤–∞–π—Ç–∏–ª–∏ –∑–∞ –¥–æ–Ω–∞—Ç</b>",
                )
            else:
                send_account_renewed_email(request.me, user)
                send_telegram_message(
                    chat=ADMIN_CHAT,
                    text=f"üéÅ <b>–Æ–∑–µ—Ä—É '{email}' –ø—Ä–æ–¥–ª–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞ –¥–æ–Ω–∞—Ç</b>",
                )

            return render(request, "message.html", {
                "title": "üéÅ –Æ–∑–µ—Ä –ø—Ä–∏–≥–ª–∞—à–µ–Ω",
                "message": f"–°–µ–π—á–∞—Å –æ–Ω –ø–æ–ª—É—á–∏—Ç –Ω–∞ –ø–æ—á—Ç—É '{email}' —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º. "
                           f"–ï–º—É –±—É–¥–µ—Ç –Ω—É–∂–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è –ø–æ —ç—Ç–æ–π –ø–æ—á—Ç–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ç—Ä–æ."
            })
    else:
        form = GodmodeInviteForm()

    return render(request, "godmode/simple_form.html", {
        "admin": ADMIN,
        "title": "‚ûï –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —é–∑–µ—Ä–∞ –≤ –ö–ª—É–±",
        "form": form
    })


@require_auth
def godmode_generate_invite_code(request):
    if request.method != "POST":
        raise Http404()

    if not request.me.is_god:
        raise AccessDenied()

    Invite.objects.create(
        user=request.me,
        payment=Payment.create(
            reference="god-" + random_string(length=16),
            user=request.me,
            product=PRODUCTS["club1_invite"],
            status=Payment.STATUS_SUCCESS,
        )
    )

    return redirect("invites")


@require_auth
def godmode_sunday_posts(request):
    new_posts_cutoff = timedelta(days=200)
    days_range = 15
    posts = []

    while len(posts) < 20:
        random_date_in_the_past = random_date_in_range(settings.LAUNCH_DATE, datetime.utcnow() - new_posts_cutoff)
        top_old_post = Post.visible_objects() \
            .exclude(type__in=[Post.TYPE_INTRO, Post.TYPE_WEEKLY_DIGEST]) \
            .filter(is_approved_by_moderator=True) \
            .filter(
                published_at__gte=random_date_in_the_past,
                published_at__lte=random_date_in_the_past + timedelta(days=days_range)
            ) \
            .order_by("-upvotes") \
            .first()

        if top_old_post:
            posts.append(top_old_post)

    return render(request, "misc/sunday_posts.html", {
        "posts": posts
    })


@require_auth
def godmode_mass_email(request):
    if not request.me.is_god:
        return render(request, "godmode/message.html", {
            "admin": ADMIN,
            "title": "ü•≤ –í–∞–º —Å—é–¥–∞ –Ω–µ–ª—å–∑—è",
            "message": f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –º–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏, —ç—Ç–æ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã —Å —Ä–æ–ª—å—é god.",
        })

    if request.method == "POST":
        form = GodmodeMassEmailForm(request.POST, request.FILES)
        if form.is_valid():
            emails_or_slugs = [u.strip().lstrip("@") for u in form.cleaned_data["recipients"].strip().split(",") if u.strip()]
            async_task(
                send_custom_mass_email,
                emails_or_slugs=emails_or_slugs,
                title=form.cleaned_data["email_title"],
                text=form.cleaned_data["email_text"],
                is_promo=form.cleaned_data["is_promo"],
            )
            return render(request, "message.html", {
                "title": f"üìß –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ {len(emails_or_slugs)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π",
                "message": "–í–æ—Ç —ç—Ç–∏–º –ª—é–¥—è–º —â–∞—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ:\n" + ", ".join(emails_or_slugs)
            })
    else:
        form = GodmodeMassEmailForm()

    return render(request, "godmode/simple_form.html", {
        "admin": ADMIN,
        "title": "üì§ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ email –∏ telegram —é–∑–µ—Ä–∞–º",
        "form": form
    })


@require_auth
def godmode_mass_achievement(request):
    if not request.me.is_moderator:
        raise AccessDenied()

    if request.method == "POST":
        form = GodmodeMassAchievementForm(request.POST, request.FILES)
        if form.is_valid():
            slugs = form.cleaned_data["recipients"].strip().split(",")
            users = User.objects.filter(slug__in=slugs)
            for user in users:
                user_achievement, is_created = UserAchievement.objects.get_or_create(
                    user=user,
                    achievement=form.cleaned_data["achievement"],
                )
                if is_created:
                    async_create_or_update_achievement(user_achievement)

            some_user_not_found = len(slugs) != users.count()
            return render(request, "message.html", {
                "title": f"üèÜ –ê—á–∏–≤–∫–∞ '{form.cleaned_data['achievement'].name}' –≤—ã–¥–∞–Ω–∞ {users.count()} —é–∑–µ—Ä–∞–º",
                "message": "–í–æ—Ç —ç—Ç–∏ —é–∑–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ö–ª—É–±–µ, –≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ –≤ –Ω–∏–∫–µ: " + ", ".join(
                    list(set(slugs) - set([u.slug for u in users]))
                ) if some_user_not_found else "–í—Å–µ —é–∑–µ—Ä—ã –ø–æ–ª—É—á–∏–ª–∏ –∞—á–∏–≤–∫–∏!"
            })
    else:
        form = GodmodeMassAchievementForm()

    return render(request, "godmode/simple_form.html", {
        "admin": ADMIN,
        "title": "üèÜ –ú–∞—Å—Å–æ–≤–∞—è –≤—ã–¥–∞—á–∞ –∞—á–∏–≤–æ–∫",
        "form": form
    })
